Day 34 Task: Working with Services in Kubernetes 

 

CongratulationðŸŽŠ on your learning on Deployments in K8s on Day-33 

What are Services in K8s 

In Kubernetes, Services are objects that provide stable network identities to Pods and abstract away the details of Pod IP addresses. Services allow Pods to receive traffic from other Pods, Services, and external clients. 

 

Task-1: 

 

What is Service? 

Each node gets its own Ip address, however in a deployment, the set of pods running in one moment in time could be different from the set of pods. 

This led to problem: - if some set of pods call them to other pods(frontend) inside your cluster. 

	To solve this, you use services: - 

	Services are used to set a virtual Ip to Replica set to avoid volatile Ip address. 

Service object is a logical bridge between pods and end users which provide virtual Ip. 

The Kube-proxy is the one which keeps the mapping between the VIP and the pods up to date, which queries the API server to learn about new services in the cluster. 

Labels are used to select which one the pods to be put under a service. 

Services can be exposed in different ways by specifying a type in the service. 

ClusterIP(default) # Work only cluster 

NodePort 

LoadBalancer	 

 

Create a Service for your Django-app Deployment from Day-32 

		vi service.yaml 

Create a Service definition for your todo-app Deployment in a YAML file. 

	 

	 

Apply the Service definition to your K8s (minikube) cluster using the kubectl apply -f service.yml -n <namespace-name> command. 

		kubectl apply -f service.yaml -n react-django-ns 

	 

	Check the running service 

	 

Verify that the Service is working by accessing the todo-app using the Service's IP and Port in your Namespace. 

	First go inside minikube 

		minikube ssh 

	Now, test the link using curl command 

	Syntax:- curl http://<service ip>:<service port> 

		   curl -L http://10.102.79.175:8001 

	 

 

Task-2: 

 

NodePort : 

Makes a service accessible from outside the cluster. 

Expose the service on the same port of each selected node in the cluster using NAT. 

By default, the range of the service NodePorts is 30000-32768. This range contains 2768 ports, which means that you can create up to 2768 services with NodePorts. 

	 

Create a Nodeport Service for accessing the todo-app from outside the cluster 

		vi service.yaml 

	 

Create a Nodeport Service definition for your todo-app Deployment in a YAML file. 

	 

 

Apply the Nodeport Service definition to your K8s (minikube) cluster using the kubectl apply -f Nodeport-ip-service.yml -n <namespace-name> command. 

 

	 

 

Verify that the Service is working by accessing the todo-app using the NodePort IP and your Namespace. 

	 You can see above URL, using this URL you can check your app in running or not? 

	Syntax : curl â€“L http://<minikube Ip>:<NodeportIP> 

	Minikube Ip address: 

	 

	Minikube service URL: - 

	 

		   curl -L http://192.168.49.2:31000 

	 

Using Describe command, you can find the service Ip address, Nodeport Ip address, all Running Pod Ip Address, service port, container running port,etc. 

		kubectl describe svc -n react-django-ns 

	 

 

 

Task-3: 

 

Create a LoadBalancer Service for accessing the todo-app from outside the cluster 

		vi service.yaml 

Create a LoadBalancer Service definition for your todo-app Deployment in a YAML file. 

	 

 

Apply the LoadBalancer Service definition to your K8s (minikube) cluster using the kubectl apply -f load-balancer-service.yml -n <namespace-name> command. 

	 

 

Verify that the LoadBalancer Service is working by accessing the todo-app from outside the cluster in your Namespace. 

	 

 

Remove one pod and check the service is still running? 

 

Struggling with Services? Take a look at this video for a step-by-step guide. 

Need help with Services in Kubernetes? Check out the Kubernetes documentation for assistance. 

Happy Learning :) 

 

apiVersion: v1 

kind: Service 

metadata: 

  name: django-svc 

  namespace: react-django-ns 

spec: 

  type: NodePort 

  selector: 

    app: django 

  ports: 

    - protocol: TCP 

      port: 8001 

      targetPort: 8001 

      nodePort: 31000 

apiVersion: v1 

kind: Service 

metadata: 

  name: django-svc 

  namespace: react-django-ns 

spec: 

  type: LoadBalancer 

  selector: 

    app: django 

  ports: 

    - protocol: TCP 

      port: 8001 

      targetPort: 8001 

    
