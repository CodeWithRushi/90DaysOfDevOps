Day 35: Mastering ConfigMaps and Secrets in Kubernetes🔒🔑🛡️ 

 

👏🎉 Yay! Yesterday we conquered Namespaces and Services 💪💻🔗🚀 

What are ConfigMaps and Secrets in k8s 

In Kubernetes, ConfigMaps and Secrets are used to store configuration data and secrets, respectively. ConfigMaps store configuration data as key-value pairs, while Secrets store sensitive data in an encrypted form. 

Example: - Imagine you're in charge of a big spaceship (Kubernetes cluster) with lots of different parts (containers) that need information to function properly. ConfigMaps are like a file cabinet where you store all the information each part needs in simple, labeled folders (key-value pairs). Secrets, on the other hand, are like a safe where you keep the important, sensitive information that shouldn't be accessible to just anyone (encrypted data). So, using ConfigMaps and Secrets, you can ensure each part of your spaceship (Kubernetes cluster) has the information it needs to work properly and keep sensitive information secure! 🚀 

Read more about ConfigMap & Secret. 

			 

A configMap can be accessed in following Ways: 

		1] As Environment Variable 

		2] As volume in the pod. 

 

Today's task: 

 

Task 1: 

 

Create a ConfigMap for your Deployment  

		vi config.yaml 

apiVersion: v1 

kind: ConfigMap 

metadata: 

  name: config12 

  namespace: react-django-ns 

data: 

   first_name: “rushikesh” 

 

 

	Apply the ConfigMap yaml file 

			kubectl apply -f config.yaml -n react-django-ns 

 

	Check Running ConfigMap Objects 

			kubectl get configmap -n react-django-ns 

 

Create a ConfigMap for your Deployment using a using Environment variable. 

	 

apiVersion: apps/v1 

kind: Deployment 

metadata: 

  name: django-deployment 

  namespace: react-django-ns 

  labels: 

    app: django 

spec: 

  replicas: 3 

  selector: 

    matchLabels: 

      app: django 

  template: 

    metadata: 

      labels: 

        app: django 

    spec: 

      containers: 

        - name: django-ctr 

          image: rushis750/django:latest 

          ports: 

            - containerPort: 8001 

          env: 

            - name: MYENV 

              valueFrom: 

                configMapKeyRef: 

                  name: config12 

                  key: first_name 

 

Apply the updated deployment using the command: kubectl apply -f deployment.yml -n <namespace-name> 

			kubectl apply -f  deployment.yaml -n react-django-ns 

 

	Check the all running pods 

			kubectl get pods -n react-django-ns 

			 

 

Verify that the ConfigMap has been created by checking the status of the ConfigMaps in your Namespace. 

	Go inside running pod and check the environment variable 

			kubectl exec -it django-deployment-7f65c999df-ts69w -n react-django-ns -- /bin/bash 

 

 

 

Create a ConfigMap for your Deployment using a using Volume. 

apiVersion: apps/v1 

kind: Deployment 

metadata: 

  name: django-deployment 

  namespace: react-django-ns 

  labels: 

    app: django 

spec: 

  replicas: 3 

  selector: 

    matchLabels: 

      app: django 

  template: 

    metadata: 

      labels: 

        app: django 

    spec: 

      containers: 

        - name: django-ctr 

          image: rushis750/django:latest 

          ports: 

            - containerPort: 8001 

          volumeMounts: 

            - name: config-vol 

              mountPath: /config   #give volume path,where your file is present 

      volumes: 

        - name: config-vol   # same as volumemounts name 

          configMap: 

            name: config12    # same name used as configmap yaml file 

            items: 

              - key: first_name   # variable name used in configmap yaml file 

                path: first_name 

 

Apply the updated deployment using the command: kubectl apply -f deployment.yml -n <namespace-name> 

				kubectl apply -f deployment-env.yaml -n react-django-ns 

 

	Check the all running pods 

			kubectl get pods -n react-django-ns 

 

 

Verify that the ConfigMap has been created by checking the status of the ConfigMaps in your Namespace. 

Go inside running pod. Find volume and check the files are available or not? 

			kubectl exec -it django-deployment2-7cdb857f46-tl8sk -n react-django-ns -- /bin/bash 

 

 

Task 2: 

 

Create a Secret for your Deployment 

	Here using echo command, we created two files. 

 

	After that create this secrete file using below command. 

			kubectl create secret generic mysecret --from-file=user.txt --from-file=password.txt -n react-django-ns 

 

	Check the all running secrets objects 

			kubectl get secrets -n react-django-ns 

 

Create a Secret for your Deployment using a volume 

apiVersion: apps/v1 

kind: Deployment 

metadata: 

  name: django-deployment 

  namespace: react-django-ns 

  labels: 

    app: django 

spec: 

  replicas: 3 

  selector: 

    matchLabels: 

      app: django 

  template: 

    metadata: 

      labels: 

        app: django 

    spec: 

      containers: 

        - name: django-ctr 

          image: rushis750/django:latest 

          ports: 

            - containerPort: 8001 

          volumeMounts: 

            - name: secret-vol 

              mountPath: /sec   #give volume path, where your file is present 

      volumes: 

        - name: secret-vol   # same as volumemounts name 

          secret: 
      secretName: mysecret 

 

 

Apply the updated deployment using the command: kubectl apply -f deployment.yml -n <namespace-name> 

				kubectl apply -f deployment_secret.yaml -n react-django-ns 

Check the running pods 

 

Verify that the Secret has been created by checking the status of the Secrets in your Namespace. 

				kubectl exec -it django-deployment-7bfb9bddbd-542dn -n react-django-ns -- /bin/bash 

 

 

Need help with ConfigMaps and Secrets? Check out this video for assistance. 

Keep learning and expanding your knowledge of Kubernetes💥🙌 

 
