Day 31 Task: Launching your First Kubernetes Cluster with React-Django app running 

 

Awesome! You learned the architecture of one of the top most important tool "Kubernetes" in your previous task. 

What about doing some hands-on now? 

Let's read about minikube and implement k8s in our local machine 

What is minikube? 

Ans: - Minikube is a tool which quickly sets up a local Kubernetes cluster on macOS, Linux, and Windows. It can deploy as a VM, a container, or on bare-metal. 

Minikube is a pared-down version of Kubernetes that gives you all the benefits of Kubernetes with a lot less effort. 

This makes it an interesting option for users who are new to containers, and also for projects in the world of edge computing and the Internet of Things. 

Features of minikube 

Ans: - 

(a) Supports the latest Kubernetes release (+6 previous minor versions) 

(b) Cross-platform (Linux, macOS, Windows) 

(c) Deploy as a VM, a container, or on bare-metal 

(d) Multiple container runtimes (CRI-O, containerd, docker) 

(e) Direct API endpoint for blazing fast image load and build 

(f) Advanced features such as Load Balancer, filesystem mounts, FeatureGates, and network policy 

(g) Addons for easily installed Kubernetes applications 

(h) Supports common CI environments 

 

Task-01: 

 

Install minikube on your local: - 

 

1] when installing minikube, first you need to launch one EC2 instance  

 

Now, this time we need to select t2.medium instance type, 

The Reason is, Kubernetes cluster works on master node architecture and you want to run the application smoothly, you need 2 CPU and at least 4GB memory. 

 

And launch the instance. 

 

2] now after installing minikube, now we need to configure the minikube 

Go to ec2 command line, and run the below commands 

sudo apt-get update && sudo apt-get install docker.io 

sudo usermod -a G docker $USER 

sudo reboot 

curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 

sudo install minikube-linux-amd64 /usr/local/bin/minikube 

 

minikube start 

If you getting any error related to driver, then add driver=docker 

  

After installing the minikube, you can see the container is running. 

 

 

Go inside minikube and see all running containers. 

		minikube ssh 

 

 

3] now minikube is installed successfully, after that install kubectl. 

Why we need to install kubectl? 

The kubectl is command used to communicate with the Kube-api-server, and deploy applications, inspect and manage cluster resources, and view logs on a node server. 

Note: - [kubectl is a containerized tool, that is the reason we use the snap to install kubectl instead of apt-get (is mostly used to take the files from the internet and install)] 

		sudo snap install kubectl –classic 

 

For installation, you can Visit this page. 

If you want to try an alternative way, you can check this. 

Let's understand the concept pod: - 

 

Ans: - 

Pods are the smallest deployable units of computing that you can create and manage in Kubernetes. 

A Pod (as in a pod of whales or pea pod) is a group of one or more containers, with shared storage and network resources, and a specification for how to run the containers. A Pod's contents are always co-located and co-scheduled, and run in a shared context. A Pod models an application-specific "logical host": it contains one or more application containers which are relatively tightly coupled. 

You can read more about pod from here . 

 

Task-02: - 

 

Create your first pod on Kubernetes through minikube. 

We are suggesting you make a nginx pod, but you can always show your creativity and do it on your own. 

 

1] first creating the Namespace 

	kubectl create namespace react-django-ns 

 

To check the namespaces is created or not? 

	kubectl get namespaces 

 

2] creating a pod.yaml file 

 

 

Apply or run the container 

kubectl apply -f pod.yaml 

 

To see all running pods 

	Kubectl get pods 

Note: - [ we created a pod inside a react-django-ns namespace, that’s why in default namespace it’s not showing the pod running] 

 

Use the same Namespace mentioned inside  pod.yaml file 

 

To check in which Ip, the pod is running, run below command. 

kubectl get pods --namespace=react-django-ns -o wide 

 

Require Detailed information of pods, 

	kubectl describe pod django --namespace=react-django-ns 

 

Delete a Pod 

	kubectl delete -f pod.yaml 

 

apiVersion: v1 
kind: Pod 
metadata: 
  name: django 

  namespace: react-django-ns 
spec: 
  containers: 
  - name: django-ctr 
    image: rushis750/django:latest 
    ports: 
    - containerPort: 80 

 
